import binascii
import random
from datetime import datetime

from flask import Blueprint
from flask_restful import Api, Resource, reqparse

from apps.utils.crypto import H2_hash_function, SymmetricEncryption

MH_bp = Blueprint('mh', __name__, url_prefix='/mh')
api = Api(MH_bp)

MH_parser = reqparse.RequestParser()
MH_parser.add_argument('Flag',
                       type=str,
                       required=True,
                       help='Must provide the Flag (Flag=0: MH generates c2;'
                            'Flag=1, MH receives (r1, t2) from CE)',
                       location=['args', 'form'])
MH_parser.add_argument('DMi',
                       type=int,
                       location=['args', 'form'])
MH_parser.add_argument('r1_from_CE',
                       type=str,
                       location=['args', 'form'])
MH_parser.add_argument('t2_from_CE',
                       type=str,
                       location=['args', 'form'])

class MHSecureCommunicateWithCEApi(Resource):
    def get(self):
        pass

    def post(self):
        args = MH_parser.parse_args()
        flag = args.get('Flag')
        global r1, t2

        # 5.  MH receives a POST request (that is 'CE starts the conversation with MH.') from CE.
        # MH executes the following computations and then will return c2 as a response to CE.
        if flag == "0":
            # passwordSalt_value, iv_value and nonce should be received from EMGWAM. Please replace them.
            passwordSalt_value = b'a#\xa1\xbe\r\xe4^\x06,a\xeeZ\x91\xfc\xf3j'
            iv_value = 90603373939604955465082505548528970619254170524234007075663211789259246989110
            nonce = 'ymNIaotdN3EQPMHpl+gZTkhYNQqGu7eHUG+MBAIbfOE='

            # generate a random number r1
            r1 = str(random.randint(1, 1000))
            # obtain the time stamp t2
            t2 = datetime.strftime(datetime.now(), "%Y-%m-%d %H:%M:%S")
            # get the DMi from the POST request sending by CE
            DMi = args.get('DMi')

            temp = r1 + t2 + str(DMi)
            # call H2 function
            H2 = H2_hash_function(temp)
            # generate a message m2
            m2 = str(r1) + ' ' + t2 + ' ' + str(DMi) + ' ' + H2
            # obtain c2
            encryptor = SymmetricEncryption(passwordSalt_value, iv_value)
            c2 = encryptor.encryption(m2, nonce)

            data = {
                "status": 200,
                "msg": "c2 has been generated by MH.",
                "c2": binascii.hexlify(c2).decode('utf-8')
            }

            return data

        # 7. MH will receive (r1, t2) from CE
        # and then double check whether these params comes from the corresponding CE.
        if flag == "1":
            r1_from_CE = args.get('r1_from_CE')
            t2_from_CE = args.get('t2_from_CE')

            if r1 == r1_from_CE and t2 == t2_from_CE:
                del r1, t2
                data = {
                        "status": 200,
                        "msg": "DMA Trusted Launch is successful."
                }
            else:
                data = {
                        "status": 400,
                        "msg": "Auth is failed from MH."
                }

            return data

api.add_resource(MHSecureCommunicateWithCEApi, '/MH2CE')